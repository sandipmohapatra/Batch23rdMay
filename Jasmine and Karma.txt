
TDD stands for Test-Driven Development. It is a software development approach where developers write tests for a piece of functionality before implementing the actual code to fulfill that functionality. The TDD process typically follows these three steps, known as the "Red-Green-Refactor" cycle:

Red: Write a test that describes the desired behavior of the code you want to implement. Initially, this test will fail since the functionality doesn't exist yet.

Green: Implement the minimum amount of code necessary to make the test pass. This step involves writing the actual code to fulfill the desired functionality.

Refactor: After the test passes, refactor the code to make it cleaner, more maintainable, and efficient while ensuring the test continues to pass. Refactoring does not introduce new features; it only improves the existing code.

The TDD process promotes a few key principles:

Test First: Write tests before writing the production code. This ensures that tests focus on the desired functionality and acts as a specification for the code.

Incremental Development: TDD encourages small, incremental steps of development. Each test added to the suite represents a small piece of functionality, and the implementation evolves gradually.

Regression Testing: By running the test suite frequently, developers can ensure that any changes or additions to the codebase do not break existing functionality. This helps catch potential issues early on.

Design Improvement: TDD can lead to better software design as it forces developers to think about the architecture and modularization of their code early in the development process.

Code Confidence: Developers can have more confidence in the correctness of their code since it is thoroughly tested by a suite of automated tests.

Overall, TDD is a disciplined and iterative approach to software development that aims to improve code quality, maintainability, and the speed of development. However, it may require some upfront effort to create a comprehensive test suite, and it may not be suitable for every project or team.
-----------------------------------------------------------------------------------------------------------------------------------------

Jasmine and Karma
--------------------------------
1)They are open source javascript framework capable to test any kind of javascript application.
2)They follows BDD (Behavior Driven Development ) procedure to ensure that each in javascript statement is properly unit tested.
3)Jasmine provides a small syntax to test the smallest unit of the application.
4)In unit testing we test small function part by part instead of testing the whole application.
-------------------------------------------------------------------------------------------------------------------------------
How to install jasmine software to do the testing
-------------------------------------------------------------------
1)download jasmine from the official website:-
https://github.com/jasmine/jasmine/releases
2)we have to download the standalone version
------------------------------
 example-1
---------------------
test1.js
--------------------
var helloworld=function()
{
    return 'Hello welcome to Jasmine';
};
------------------------------
spect1.js
-------------------------
describe("Hello welcome to Jasmine",function()
{
    it("should return Hello welcome to Jasmine",function()
    {
        expect(helloworld()).toEqual('Hello welcome to Jasmine');
    });
});
--------------------------------------------
SpecRunner.html
---------------------------------------------
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Jasmine Spec Runner v5.0.1</title>

  <link rel="shortcut icon" type="image/png" href="lib/jasmine-5.0.1/jasmine_favicon.png">
  <link rel="stylesheet" href="lib/jasmine-5.0.1/jasmine.css">

  <script src="lib/jasmine-5.0.1/jasmine.js"></script>
  <script src="lib/jasmine-5.0.1/jasmine-html.js"></script>
  <script src="lib/jasmine-5.0.1/boot0.js"></script>
  <!-- optional: include a file here that configures the Jasmine env -->
  <script src="lib/jasmine-5.0.1/boot1.js"></script>

  <!-- include source files here... -->
  <script src="src/test1.js"></script>
  

  <!-- include spec files here... -->
  <script src="spec/spect1.js"></script>
  

</head>

<body>
</body>
</html>
------------------------------------------------------------------------------------------
Rule
--------------------
In the spec file we have 2 parts
1)expected output
2)real output

If both match then the test is successful otherwise it will be failure.
------------------------------------------------------------------------------------------------------
Example-2
----------------------
calculator =function() {};
calculator.prototype.sum=function (number1,number2)
{
return number1 + number2;
} 
---------------------------------------
describe("calculator",function(){
var cal;
beforeEach(function()
{
cal=new calculator();
});

describe("we use the calculator to do basic maths operations", function()
{
it("should be able to add 3 and 5 ",function()
{
expect(cal.sum(3,5)).toEqual(8);
});
});
});
---------------------------------------------------------------------------
beforeEach() :- The beforeEach function is called once before each spec in the describe() in which it is called.
afterEach():- This is called once after spec.
-----------------------------------------------------------------------
Example 3:-
--------------------
calculator =function() {};

calculator.prototype.sum=function (number1,number2)
{
return number1 + number2;
} 

calculator.prototype.sub=function (number1,number2)
{
return number1 - number2;
} 

calculator.prototype.mul=function (number1,number2)
{
return number1 * number2;
} 

calculator.prototype.div=function (number1,number2)
{
return number1 / number2;
} 

--------------------------------------------------------------------------------------------------------
describe("calculator",function(){
var cal;
beforeEach(function()
{
cal=new calculator();
});

describe("we use the calculator to do basic maths operations", function()
{
it("should be able to add 3 and 5 ",function()
{
expect(cal.sum(3,5)).toEqual(8);
});

it("should be able to sub 5 and 3 ",function()
{
expect(cal.sub(5,3)).toEqual(2);
});

it("should be able to mul 5 and 3 ",function()
{
expect(cal.mul(5,3)).toEqual(15);
});

it("should be able to div 6 and 3 ",function()
{
expect(cal.div(6,3)).toEqual(2);
});

});
});
--------------------------------------------------------------------------------
example-4
----------------------
factorial =function() {};

factorial.prototype.fac=function(number1)
{
let ans=1;
for(var i=number1;i>=1;i--)
{
ans=ans*i;
}
return ans;
}
----------------------------------------------------------------------------------
describe("factorial",function(){
var fact;
beforeEach(function()
{
fact=new factorial();
});

describe("we use the factorial to do a factor operations", function()
{
it("should be able to find factorial of 4 ",function()
{
expect(fact.fac(4)).toEqual(24);
});
});
});
---------------------------------------------------------------------------------
toEqual():-It is simplest matcher present in the jasmin inbuilt library.
It checks that the result of the operation matches with the expected result or not.
-------------------------------------------------------------------------------------------------------
not.toEqual():- It is opposite to toEqual(). 
It checks that the result of the operation matches with the expected result or not.
-----------------------------------------------------------------------
example-5
--------------------
factorial =function() {};

factorial.prototype.fac=function(number1)
{
let ans=1;
for(var i=number1;i>=1;i--)
{
ans=ans*i;
}
return ans;
}
----------------------------------------
describe("factorial",function(){
    var fact;
    beforeEach(function()
    {
    fact=new factorial();
    });
    
    describe("we use the factorial to do a factor operations not equal to", function()
    {
    it("should be able to find factorial of 4 ",function()
    {
    expect(fact.fac(4)).not.toEqual(23);
    });
    });
    });
------------------------------------------------------------------------------
toBe():- It is similar to toEqual() but it matches with the string type or Object type content.
----------------------------------
example-6
----------------------
window.x={
    name:"sandip",
    name1:"sandip"
};
--------------------------------------------------------
describe("Example of toBe",function()
{
    it("This is an example of toBe method",function()
    {
        expect(x.name).toBe(x.name1);
    });
});
--------------------------------------------------------------------------
not.toBe():- It is opposite to toBe() but it matches with the string type or Object type.
--------------------------------------------------------------
example-7
-------------------------
window.x={
    name:"sandip",
    name1:"pawan"
};
--------------------------------------------------------
describe("Example of not.toBe",function()
{
    it("This is an example of not.toBe method",function()
    {
        expect(x.name).not.toBe(x.name1);
    });
});
--------------------------------------------------------------------------
Difference between toEqual() and toBe()
-----------------------------------------------------------------------------
example-8
---------------------
var spot = { name: "Sandip Kumar",Rollno: 101 };
var cosmo ={ name: "Sandip Kumar",Rollno: 101 };
-------------------------------------------------
describe("Example of  toBe() and toEqual()",function()
{
    it("This is an example of toequal method",function()
    {
        expect(spot).toEqual(cosmo); 
        // success; equivalent or content of object are same
        
    });
    it("This is an example of toBe method",function()
    {
        expect(spot).toBe(cosmo);     // failure; not the same object
        
    });
    it("This is an example of toBe method",function()
    {
        expect(spot).toBe(spot);  //success because the objects are same 
    });
});
-------------------------------------------------------------------------------------------------------------
example-9
-----------------------
example = function() {};

example.prototype.sqr=function(number1)
{
return number1*number1;
}


example.prototype.cb=function(number1)
{
return number1*number1*number1;
}


example.prototype.gt2=function(number1, number2)
{
if(number1>number2)
{
return number1;
}
else
{
return number2;
}
}
----------------------------------------------------------------------------------------------
describe("example",function()
{
var sqr1;
beforeEach(function()
{
sqr1=new example();
});

describe("we should find the operations",function()
{

it("should be able to find the square of 1 nos",function()
{
expect(sqr1.sqr(4)).toEqual(16);
});

it("should be able to find the cube of 1 nos",function()
{
expect(sqr1.cb(2)).toEqual(8);
});

it("should be able to find the greatest of 2 nos",function()
{
expect(sqr1.gt2(2,3)).toEqual(3);
});

});
});
---------------------------------------------------------------------------------------------------------
not.toBe() :-It matches with the type of object.
It is opposite to toBe()
------------------------------------------------------------------
example-10
---------------------------
window.x={
name:"Pawan",
name1:"Priya"
};
------------------------------------------------
describe("Difference between 2 strings",function()
{
it(" example of  not.toBe()",function()
{
expect(x.name).not.toBe(x.name1);
});
});
--------------------------------------------------------------------
ToBeTruthy():- This is Boolean matcher to check whether the result is equal to true or false.
example 11:-
----------------------
window.x={
exTF : function(num)
{
if(num < 10)
return true;
else
return false;
},
};
-----------------------------------------------------------------------
describe("To Test that the condition is true or false",function()
{
it("This is an example of toBeTruthy",function()
{
expect(x.exTF(7)).toBeTruthy();
});
});
-------------------------------------------------------------------------
ToBeFalsy():- This is Boolean matcher to check whether the result is equal to true or false.
example 11:-
----------------------
window.x={
exTF : function(num)
{
if(num < 10)
return true;
else
return false;
},
};
-----------------------------------------------------------------------
describe("To Test that the condition is true or false",function()
{
it("This is an example of toBeFalsy",function()
{
expect(x.exTF(17)).toBeFalsy();
});
});
-------------------------------------------------------------------------
example-12
----------------------
To contain():- It matches with the element in an array or some other sequence Object.

describe("To Test that the element is present in the array",function()
{
it("This is an example of toContain",function()
{
expect([1,2,3,4,5,6,7]).toContain(3);
});
});
-------------------------------------------------------------------------------------------------------------
example-13
------------------
ToBeCloseTo():- It matches whether the actual value is near to the expected value.

example:-
describe("To Test that the element is near to the expected value",function()
{
it("This is an example of find if the expected value is near to the real value ",function()
{
expect(3.41).toBeCloseTo(3.4,1);
});
});
--------------------------------------------------------------------------------------------------
example-14
-------------------
toMatch():- It is mainly used to match two strings.
Actually it checks it a specific string is present in the other string.
example:- str1="My name is sandip"
str2="My name" 
str2 is prsent inside the str1;
-----------------------------------------------------------------------------------------------------------------------
describe("To checks it a specific string is present in the other string.",function()
{
it("This is an example of find if the specific string is present in the other string. ",function()
{
expect("My name is sandip").toMatch(/My name/);
});
});

--------------------------------------------------------------------------------------
example-15
------------------
toBeDefined():- This checks whether any variable is assigned or not.
example x=10;
--------------------
val=10;
describe("To checks if the variable is assigned or not.",function()
{
it("To checks if the variable is assigned or not. ",function()
{
expect(val).toBeDefined();
});
});

-----------------------------------------------------------------------------------------------------
example-16
------------------
toBeUndefined():- This checks whether any variable is assigned or not.
example x=10;
--------------------
let val;
describe("To checks if the variable is assigned or not.",function()
{
it("To checks if the variable is assigned or not. ",function()
{
expect(val).toBeUndefined();
});
});
---------------------------------------------------------------------------------------------------------
example-17
---------------------------
toBeNull() :- This will check the value is null or not.
example :- var name=null;

example:-
describe("This will check the value is null or not.",function()
{
it("This will check the value is null or not.. ",function()
{
var x=null;
expect(x).toBeNull();
});
});
---------------------------------------------------------------------------------------
example -18
------------------------
toBeGreaterThan():- It is applicable to numbers only.
It is used to check the number is greater then the other number or not.
---------------------------------------
describe("It is used to check the number is greater then the other number or not ",function()
{
it("It is used to check the number is greater then the other number or not ",function()
{
var x=8;
expect(x).toBeGreaterThan(5);
});
});

-------------------------------------------------------------------------------------------------------
example -19
------------------------
toBeLessThan():- It is applicable to numbers only.
It is used to check the number is less then other number or not.
---------------------------------------
describe("It is used to check the number is less then the other number or not ",function()
{
it("It is used to check the number is less then the other number or not ",function()
{
var x=8;
expect(x).toBeLessThan(15);
});
});

-------------------------------------------------------------------------------------------------------
Example-20
---------------------
toBeNAN:- to check the output is not a number.
example :- 6/6=1;0/0=infinity here the output will be NAN.
---------------------------
describe("to check the output is not a number ",function()
{
it("to check the output is not a number",function()
{

var x=0/0;
expect(x).toBeNaN();
});
});
--------------------------------------------------------------------------------------------------------
Example-21
--------------------------------------
contact.ts
---------------------
import { Component } from '@angular/core';
import { FormControl,FormGroup,Validators } from '@angular/forms';

@Component({
  selector: 'app-contact',
  templateUrl: './contact.component.html',
  styleUrls: ['./contact.component.css']
})
export class ContactComponent
{
text ='Contact Page';
contactForm: any;
contact = {
  name:'',
  email:'',
  text:''
};
submitted = false;

constructor()
{
  this.createForm();
}
createForm():void {
  this.contactForm =new FormGroup({

    'name':new FormControl(this.contact.name,[
      Validators.required,
      Validators.minLength(4)]),

      'email':new FormControl(this.contact.email,[
      Validators.required,
      Validators.email]),

      'text':new FormControl(this.contact.text,
        Validators.required)
        });
}
onSubmit():void{
  this.submitted =true;
}
}
-----------------------------------------------------------------------------------------
contact.html
------------------------
<!DOCTYPE html>
<html lang="en">
<head>
  <title>Bootstrap Example</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.2/jquery.min.js"></script>
  <script src="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"></script>
</head>
<body>
<div class="container-fluid">
<p>{{ text }}</p>
<form id="contact-form" [formGroup]="contactForm" (ngSubmit)="onSubmit()" novalidate>
<div class="formGroup">
<label class="center-block">
  Name:
  <input class="form-control" formControlName="name">
</label>
<label class="center-block">
  Email:
  <input class="form-control" formControlName="email">
</label>
<label class="center-block">
  Text:
  <input class="form-control" formControlName="text">
</label>
</div>
<button type="submit" [disabled]="!contactForm.valid" class="btn btn-success">Save</button>
</form>
</div>
</body>
----------------------------------------------------------------------------------------
module.ts
----------------
import { FormsModule, ReactiveFormsModule} from '@angular/forms';

imports: [
    FormsModule,
    ReactiveFormsModule
  ],
---------------------------------------------------------------
We have 2 types of form
1)template driven forms
2)reactive forms
------------------------------------------------------------








